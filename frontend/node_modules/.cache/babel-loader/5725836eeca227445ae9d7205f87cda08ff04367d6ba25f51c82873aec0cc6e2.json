{"ast":null,"code":"var _jsxFileName = \"/home/a/Desktop/learn/project-x/frontend/src/components/Dashboard/LastSensors/LastSensors.tsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport \"./LastSensors.scss\";\nimport { useSelector } from \"react-redux\";\nimport { Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper } from \"@mui/material\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction LastSensors() {\n  _s();\n  const sensors = useSelector(state => state.containers);\n  console.log(\"sensors\", sensors);\n  function getFillPercentage(capacity, filled) {\n    return Math.round(filled / capacity * 100);\n  }\n  function getColor(capacity, filled) {\n    const percentage = getFillPercentage(capacity, filled);\n    if (percentage > 75) {\n      return \"green\";\n    } else if (percentage > 50) {\n      return \"yellow\";\n    }\n    return \"red\";\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Last Sensors\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TableContainer, {\n      component: Paper,\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        children: [/*#__PURE__*/_jsxDEV(TableHead, {\n          children: /*#__PURE__*/_jsxDEV(TableRow, {\n            children: [/*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"Sensor ID\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 40,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"Product name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 41,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"Product capacity \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 42,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"Quantity\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 43,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"Fill percentage\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 44,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n          children: sensors.map(sensor => /*#__PURE__*/_jsxDEV(TableRow, {\n            children: [/*#__PURE__*/_jsxDEV(TableCell, {\n              children: sensor.id\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: sensor.container.product.productName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: sensor.container.product.capacity\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: sensor.quantity\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              style: {\n                backgroundColor: getColor(Number(sensor.container.product.capacity), Number(sensor.quantity))\n              },\n              children: [getFillPercentage(Number(sensor.container.product.capacity), Number(sensor.quantity)), \"%\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 17\n            }, this)]\n          }, sensor.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n}\n_s(LastSensors, \"uq82vyyy6LDBooObMSx2W4OBku0=\", false, function () {\n  return [useSelector];\n});\n_c = LastSensors;\nexport default LastSensors;\nvar _c;\n$RefreshReg$(_c, \"LastSensors\");","map":{"version":3,"names":["React","useSelector","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Paper","jsxDEV","_jsxDEV","LastSensors","_s","sensors","state","containers","console","log","getFillPercentage","capacity","filled","Math","round","getColor","percentage","children","fileName","_jsxFileName","lineNumber","columnNumber","component","map","sensor","id","container","product","productName","quantity","style","backgroundColor","Number","_c","$RefreshReg$"],"sources":["/home/a/Desktop/learn/project-x/frontend/src/components/Dashboard/LastSensors/LastSensors.tsx"],"sourcesContent":["import React from \"react\";\nimport \"./LastSensors.scss\";\nimport { RootState } from \"../../../types/interfaces\";\nimport { useSelector } from \"react-redux\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Paper,\n} from \"@mui/material\";\n\nfunction LastSensors() {\n  const sensors = useSelector((state: RootState) => state.containers);\n  console.log(\"sensors\", sensors);\n\n  function getFillPercentage(capacity: number, filled: number) {\n    return Math.round((filled / capacity) * 100);\n  }\n\n  function getColor(capacity: number, filled: number) {\n    const percentage = getFillPercentage(capacity, filled);\n    if (percentage > 75) {\n      return \"green\";\n    } else if (percentage > 50) {\n      return \"yellow\";\n    }\n    return \"red\";\n  }\n\n  return (\n    <div>\n      <h2>Last Sensors</h2>\n      <TableContainer component={Paper}>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell>Sensor ID</TableCell>\n              <TableCell>Product name</TableCell>\n              <TableCell>Product capacity </TableCell>\n              <TableCell>Quantity</TableCell>\n              <TableCell>Fill percentage</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {sensors.map((sensor) => (\n              <TableRow key={sensor.id}>\n                <TableCell>{sensor.id}</TableCell>\n                <TableCell>{sensor.container.product.productName}</TableCell>\n                <TableCell>{sensor.container.product.capacity}</TableCell>\n                <TableCell>{sensor.quantity}</TableCell>\n                {/*  другие данные  */}\n                <TableCell\n                  style={{\n                    backgroundColor: getColor(\n                      Number(sensor.container.product.capacity),\n                      Number(sensor.quantity)\n                    ),\n                  }}\n                >\n                  {getFillPercentage(\n                    Number(sensor.container.product.capacity),\n                    Number(sensor.quantity)\n                  )}\n                  %\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </div>\n  );\n}\n\nexport default LastSensors;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}